{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","GifGridItem","className","src","alt","GifGrid","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAgCeA,EA7BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAkBvC,OACI,0BAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC7CN,EAAc,OAOd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,Y,uBCPlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,gDACkCC,UAAUH,GAD5C,+DAEII,MAAMF,GAFV,cAEbG,EAFa,gBAGIA,EAASC,OAHb,uBAGXC,EAHW,EAGXA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtB,kBAcZM,GAdY,4CAAH,sDCuBLO,EArBM,SAACf,GAAc,IAAD,EAELd,mBAAS,CAC/BqB,KAAM,GACNS,SAAS,IAJkB,mBAExBC,EAFwB,KAEjBC,EAFiB,KAkB/B,OAXAC,qBAAU,WACNpB,EAAQC,GACHoB,MAAK,SAAAP,GACFK,EAAS,CACLX,KAAMM,EACNG,SAAS,SAItB,CAAChB,IAEGiB,GCVII,EATK,SAAC,GAAoB,IAAlBT,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC1B,OACI,yBAAKoB,UAAU,0CACX,yBAAKC,IAAMrB,EAAMsB,IAAMZ,IACvB,2BAAKA,KCmBFa,EArBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,EAGGe,EAAaf,GAAjCa,EAHiB,EAGtBN,KAAaS,EAHS,EAGTA,QAErB,OACI,oCACA,wBAAIM,UAAU,qCAAuCtB,GACjD,yBAAKsB,UAAU,aACTN,GAAW,uBAAGM,UAAU,oCAAb,cACZT,EAAOJ,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIgB,IAAKhB,EAAIC,IACJD,UCUdiB,EAvBM,WAAO,IAAD,EAEazC,mBAAS,CAAC,cAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI0B,IAAM1B,EACNA,SAAWA,U,MCXvC4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.48459273.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = e => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [ inputValue, ...categories,]);\n            setInputValue('');\n        }\n        \n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n        </form>\n    );\n};\n\nexport default AddCategory;\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","// encodeURI() limpia la url, espacios en blanco etc\nexport const getGifs = async ( category ) => {\n    const url = `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=UUubMjczgjVvOWs51iSQ0AwuwxKuwt2c`;\n    const response = await fetch(url);\n    const { data } = await response.json();\n\n    // muto el array solo con la info que necesito\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        };\n    });\n\n    return gifs;\n};","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(images => {\n                setState({\n                    data: images,\n                    loading: false\n                });\n                \n            });\n    }, [category]);\n\n    return state;\n};\n\nexport default useFetchGifs;","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title }/>\n            <p>{ title }</p>\n        </div>\n    );\n};\n\nexport default GifGridItem;","import React from 'react';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    // renombro data por images data:images\n    const { data:images, loading } = useFetchGifs(category);\n    \n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\" >{ category }</h3>\n            <div className=\"card-grid\">\n                { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n                {images.map(img => (\n                    <GifGridItem \n                        key={img.id}\n                        { ...img }\n                    />\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport default GifGrid;","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n            <ol>\n                { \n                    categories.map(category => (\n                        <GifGrid \n                            key={ category }\n                            category={ category } \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}